{
  "name": "restangular",
  "description": "Restful Resources service for AngularJS apps",
  "version": "1.1.3",
  "filename": "restangular.min.js",
  "main": "./dist/restangular.min.js",
  "homepage": "https://github.com/mgonto/restangular",
  "author": {
    "name": "Martin Gontovnikas",
    "email": "martin@gonto.com.ar"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mgonto/restangular.git"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "keywords": [
    "angular",
    "client",
    "browser",
    "restful",
    "resources",
    "rest",
    "api"
  ],
  "maintainers": [
    {
      "name": "Martin Gontovnikas"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "grunt-cli": ">= 0.1.7",
    "grunt-contrib-concat": "*",
    "grunt-contrib-jshint": "*",
    "grunt-contrib-uglify": "*",
    "grunt-bower": "*",
    "grunt-bower-task": "*",
    "grunt-karma": "latest",
    "grunt-conventional-changelog": "0.0.12",
    "grunt-zip": "*"
  },
  "scripts": {
    "test": "grunt travis --verbose"
  },
  "license": "MIT",
  "readme": "#Restangular\n\n[![Build Status](https://travis-ci.org/mgonto/restangular.png)](https://travis-ci.org/mgonto/restangular)\n<a href=\"https://twitter.com/intent/tweet?hashtags=&original_referer=http%3A%2F%2Fgithub.com%2F&text=Check+out+Restangular%2C+a+service+for+%23AngularJS+that+makes+it+easy+to+use+Res+APIs&tw_p=tweetbutton&url=https%3A%2F%2Fgithub.com%2Fmgonto%2Frestangular\" target=\"_blank\">\n  <img src=\"http://jpillora.com/github-twitter-button/img/tweet.png\"></img>\n</a>\n\nRestangular is an AngularJS service that will help you get, delete and update Restful Resources with very few lines in the Client side. \nThis service is a perfect fit for any WebApp that uses Restful Resources as the API for your application.\n\n**If you want to check a live example, [please click this link to plunkr](http://plnkr.co/edit/d6yDka?p=preview).** It's the same example as [Angular's Javascript Projects](http://angularjs.org/#wire-up-a-backend) but Restangularized.\n\n#Table of contents\n\n- [Restangular](#restangular)\n- [Table of contents](#table-of-contents)\n\t- [Differences with $resource](#differences-with-resource)\n- [How do I add this to my project?](#how-do-i-add-this-to-my-project)\n- [Dependencies](#dependencies)\n- [Starter Guide](#starter-guide)\n\t- [Quick configuration for Lazy Readers](#quick-configuration-for-lazy-readers)\n\t- [Adding dependency to Restangular module in your app](#adding-dependency-to-restangular-module-in-your-app)\n\t- [Using Restangular](#using-restangular)\n\t\t- [Creating Main Restangular object](#creating-main-restangular-object)\n\t\t- [Let's code!](#lets-code)\n\t- [Configuring Restangular](#configuring-restangular)\n\t\t- [Properties](#properties)\n\t\t\t- [setBaseUrl](#setbaseurl)\n\t\t\t- [setExtraFields](#setextrafields)\n\t\t\t- [setParentless](#setparentless)\n\t\t\t- [setDefaultHttpFields](#setdefaulthttpfields)\n\t\t\t- [addElementTransformer](#addelementtransformer)\n\t\t\t- [setOnElemRestangularized](#setonelemrestangularized)\n\t\t\t- [setResponseInterceptor (or setResponseExtractor. It's an Alias)](#setresponseinterceptor-or-setresponseextractor-its-an-alias)\n\t\t\t- [setRequestInterceptor](#setrequestinterceptor)\n\t\t\t- [setFullRequestInterceptor](#setfullrequestinterceptor)\n\t\t\t- [setErrorInterceptor](#seterrorinterceptor)\n\t\t\t- [setRestangularFields](#setrestangularfields)\n\t\t\t- [setMethodOverriders](#setmethodoverriders)\n\t\t\t- [setDefaultRequestParams](#setdefaultrequestparams)\n\t\t\t- [setFullResponse](#setfullresponse)\n\t\t\t- [setDefaultHeaders](#setdefaultheaders)\n\t\t\t- [setRequestSuffix](#setrequestsuffix)\n\t\t\t- [setUseCannonicalId](#setusecannonicalid)\n\t\t- [How to configure them globally](#how-to-configure-them-globally)\n\t\t\t- [Configuring in the config](#configuring-in-the-config)\n\t\t\t- [Configuring in the run](#configuring-in-the-run)\n\t\t- [How to create a Restangular service with a different configuration from the global one](#how-to-create-a-restangular-service-with-a-different-configuration-from-the-global-one)\n\t- [Methods description](#methods-description)\n\t\t- [Restangular methods](#restangular-methods)\n\t\t- [Element methods](#element-methods)\n\t\t- [Collection methods](#collection-methods)\n\t\t- [Custom methods](#custom-methods)\n\t- [Copying elements](#copying-elements)\n\t- [Enhanced promises](#enhanced-promises)\n\t- [Using Self reference resources](#using-self-reference-resources)\n\t- [URL Building](#url-building)\n\t- [Creating new Restangular Methods](#creating-new-restangular-methods)\n\t- [Adding Custom Methods to Collections](#adding-custom-methods-to-collections)\n\t\t- [Example:](#example)\n\t- [Adding Custom Methods to Models](#adding-custom-methods-to-models)\n\t\t- [Example:](#example-1)\n- [FAQ](#faq)\n\t\t\t- [How can I handle errors?](#how-can-i-handle-errors)\n\t\t\t- [I need to send one header in EVERY Restangular request, how do I do this?](#i-need-to-send-one-header-in-every-restangular-request-how-do-i-do-this)\n\t\t\t- [Can I cache requests?](#can-i-cache-requests)\n\t\t\t- [Can it be used in $routeProvider.resolve?](#can-it-be-used-in-routeproviderresolve)\n\t\t\t- [My response is actually wrapped with some metadata. How do I get the data in that case?](#my-response-is-actually-wrapped-with-some-metadata-how-do-i-get-the-data-in-that-case)\n\t\t\t- [I use Mongo and the ID of the elements is _id not id as the default. Therefore requests are sent to undefined routes](#i-use-mongo-and-the-id-of-the-elements-is-_id-not-id-as-the-default-therefore-requests-are-sent-to-undefined-routes)\n\t\t\t- [How do I handle CRUD operations in a List returned by Restangular?](#how-do-i-handle-crud-operations-in-a-list-returned-by-restangular)\n\t\t\t- [When I set baseUrl with a port, it's stripped out.](#when-i-set-baseurl-with-a-port-its-stripped-out)\n\t\t\t- [How can I access the unrestangularized element as well as the restangularized one?](#how-can-i-access-the-unrestangularized-element-as-well-as-the-restangularized-one)\n\t\t\t- [Why does this depend on Lodash / Underscore?](#why-does-this-depend-on-lodash--underscore)\n- [Supported Angular versions](#supported-angular-versions)\n- [Server Frameworks](#server-frameworks)\n- [Releases Notes](#releases-notes)\n- [License](#license)\n\n## Differences with $resource\n\nRestangular has several features that distinguish it from $resource:\n\n* **It uses [promises](http://docs.angularjs.org/api/ng.$q)**. Instead of doing the \"magic\" filling of objects like $resource, it uses promises.\n* **You can use this in $routeProvider.resolve**. As Restangular returns promises, you can return any of the methods in the `$routeProvider.resolve` and you'll get the real object injected into your controller if you want.\n* **It doesn't have all those `$resource` bugs**. Restangular doesn't have problem with trailling slashes, additional `:` in the URL, escaping information, expecting only arrays for getting lists, etc.\n* **It supports all HTTP methods**.\n* **It supports ETag out of the box**. You don't have to do anything. ETags and If-None-Match will be used in all of your requests\n* *It supports self linking elements** If you receive from the server some item that has a link to itself, you can use that to query the server instead of writing the URL manually.\n* **You don't have to create one $resource object per request**. Each time you want to do a request, you can just do it using the object that was returned by Restangular. You don't need to create a new object for this.\n* **You don't have to write or remember ANY URL**. With $resource, you need to write the URL Template. In here, you don't write any urls. You just write the name of the resource you want to fetch and that's it.\n* **It supports nested RestFUL resources**. If you have Nested RestFUL resources, Restangular can handle them for you. You don't have to know the URL, the path, or anything to do all of the HTTP operations you want.\n* **Restangular lets you create your own methods**. You can create your own methods to run the operation that you want. The sky is the limit.\n* **Support for wrapped responses**. If your response for a list of element actually returns an object with some property inside which has the list, it's very hard to use $resource. Restangular knows that and it makes it easy on you. Check out https://github.com/mgonto/restangular#my-response-is-actually-wrapped-with-some-metadata-how-do-i-get-the-data-in-that-case\n* **You can build your own URLs with Restangular objects easily**. Restangular lets you create a Restangular object for any url you want with a really nice builder.\n\nLet's see a quick and short example of these features\n````javascript\n// It uses promises.\nRestangular.one('users').getList().then(function(users) {\n  $scope.user = users[0];\n})\n\n// Later in the code.\n\n// Requests /users/123/cars You don't have to know the URL. Just the name of the resource\n// This is a promise\n$scope.cars = $scope.user.getList('cars');\n\n// POST /users/123/sendMessage You've created your own method with the path & operation that you wanted\n$scope.user.sendMessage();\n\n// URL Building\n// GET to /user/123/messages/123/from/123/unread\n$scope.user.one('messages', 123).one('from', 123).getList('unread')\n\n\n````\n\n#How do I add this to my project?\n\nYou can download this by:\n\n* Using bower and running `bower install restangular`\n* Using npm and running `npm install restangular`\n* Downloading it manually by clicking [here to download development unminified version](https://raw.github.com/mgonto/restangular/master/dist/restangular.js) or [here to download minified production version](https://raw.github.com/mgonto/restangular/master/dist/restangular.min.js)\n* Using [JsDelivr CDN files](https://github.com/jimaek/jsdelivr/tree/master/files/restangular):\n\n````html\n<!-- Use LATEST folder to always get the latest version-->\n<script type=\"text/javascript\" src=\"http://cdn.jsdelivr.net/restangular/latest/restangular.js\"></script>\n<script type=\"text/javascript\" src=\"http://cdn.jsdelivr.net/restangular/latest/restangular.min.js\"></script>\n\n<!-- Or use TAG number for specific version -->\n<script type=\"text/javascript\" src=\"http://cdn.jsdelivr.net/restangular/0.6.1/restangular.js\"></script>\n<script type=\"text/javascript\" src=\"http://cdn.jsdelivr.net/restangular/0.6.1/restangular.min.js\"></script>\n````\n\n\n#Dependencies\n\nRestangular depends on Angular and (Underscore or Lodash). **angular-resource is no longer needed since version 1.0.6, now this uses `$http` instead of `$resource`**\n\n#Starter Guide\n\n## Quick configuration for Lazy Readers\nThis is the quick configuration to bootstrap all. Read the rest of the documentation for further configuration and understanding\n\n````javascript\nangular.module('sample-app', ['restangular'])\n  .config(function(RestangularProvider) {\n    RestangularProvider.setBaseUrl(\"/api/v1\");\n  });\n  \nangular.module('sample-app').controller('MainCtrl', function($scope, Restangular) {\n  $scope.projects = Restangular.all('projects').getList();\n});\n````\n\n## Adding dependency to Restangular module in your app\n\nThe first thing you need to do after adding the link to your script file, is mentioning in your app that you'll use Restangular.\n\n````javascript\nvar app = angular.module('angularjs-starter', ['restangular']);\n````\n\n## Using Restangular\n\nNow that you have everything configured, you can just inject this Service to any Controller or Directive like any other :)\n\n### Creating Main Restangular object\n\nThere are 2 ways of creating a main Restangular object. \nThe first one and most common one is by stating the main route of all requests. \nThe second one is by stating the main route and object of all requests.\n\n````javascript\n// Only stating main route\nRestangular.all('accounts')\n\n// Stating main object\nRestangular.one('accounts', 1234)\n````\n\n### Let's code!\n\nNow that we have our main Object let's start playing with it.\n\n````javascript\n// First way of creating a Restangular object. Just saying the base URL\nvar baseAccounts = Restangular.all('accounts');\n\n// This will query /accounts and return a promise. As Angular supports setting promises to scope variables\n// as soon as we get the information from the server, it will be shown in our template :)\n$scope.allAccounts = baseAccounts.getList();\n\nvar newAccount = {name: \"Gonto's account\"};\n\n// POST /accounts\nbaseAccounts.post(newAccount);\n\n// GET to http://www.google.com/ You set the URL in this case\nRestangular.allUrl('googlers', 'http://www.google.com/').getList();\n\n// GET to http://www.google.com/1 You set the URL in this case\nRestangular.oneUrl('googlers', 'http://www.google.com/1').get();\n\n// You can do RequestLess \"connections\" if you need as well\n\n// Just ONE GET to /accounts/123/buildings/456\nRestangular.one('accounts', 123).one('buildings', 456).get()\n\n// Just ONE GET to /accounts/123/buildings\nRestangular.one('accounts', 123).getList('buildings')\n\n// Here we use Promises then \n// GET /accounts\nbaseAccounts.getList().then(function (accounts) {\n  // Here we can continue fetching the tree :).\n\n  var firstAccount = accounts[0];\n  // This will query /accounts/123/buildings considering 123 is the id of the firstAccount\n  $scope.buildings = firstAccount.getList(\"buildings\");\n  \n  // GET /accounts/123/places?query=param with request header: x-user:mgonto\n  $scope.loggedInPlaces = firstAccount.getList(\"places\", {query: param}, {'x-user': 'mgonto'})\n\n  // This is a regular JS object, we can change anything we want :) \n  firstAccount.name = \"Gonto\"\n  \n  // If we wanted to keep the original as it is, we can copy it to a new element\n  var editFirstAccount = Restangular.copy(firstAccount);\n  editFirstAccount.name = \"New Name\";\n  \n\n  // PUT /accounts/123. The name of this account will be changed from now on\n  firstAccount.put();\n  editFirstAccount.put();\n\n  // DELETE /accounts/123 We don't have first account anymore :(\n  firstAccount.remove();\n  \n  var myBuilding = {\n    name: \"Gonto's Building\",\n    place: \"Argentina\"\n  };\n  \n  // POST /accounts/123/buildings with MyBuilding information\n  firstAccount.post(\"Buildings\", myBuilding).then(function() {\n    console.log(\"Object saved OK\");\n  }, function() {\n    console.log(\"There was an error saving\");\n  });\n\n  // GET /accounts/123/users?query=params\n  firstAccount.getList(\"users\", {query: params}).then(function(users) {\n    // Instead of posting nested element, a collection can post to itself\n    // POST /accounts/123/users\n    users.post({userName: 'unknown'});\n    \n    // Custom methods are available now :).\n    // GET /accounts/123/users/messages?param=myParam\n    users.customGET(\"messages\", {param: \"myParam\"})\n    \n    var firstUser = users[0];\n\n    // GET /accounts/123/users/456. Just in case we want to update one user :)\n    $scope.userFromServer = firstUser.get();\n    \n    // ALL http methods are available :)\n    // HEAD /accounts/123/users/456\n    firstUser.head()\n\n  });\n\n}, function errorCallback() {\n  alert(\"Oops error from server :(\");\n})\n\n// Second way of creating Restangular object. URL and ID :)\nvar account = Restangular.one(\"accounts\", 123);\n\n// GET /accounts/123?single=true\n$scope.account = account.get({single: true});\n\n// POST /accounts/123/messages?param=myParam with the body of name: \"My Message\"\naccount.customPOST(\"messages\", {param: \"myParam\"}, {}, {name: \"My Message\"})\n\n\n````\n\n## Configuring Restangular\n\n### Properties\nRestangular comes with defaults for all of its properties but you can configure them. **So, if you don't need to configure something, there's no need to add the configuration.**\nYou can set all these configurations in **`RestangularProvider` or `Restangular` service to change the global configuration** or you can **use the withConfig method in Restangular service to create a new Restangular service with some scoped configuration**. Check the section on this later.\n\n#### setBaseUrl\nThe base URL for all calls to your API. For example if your URL for fetching accounts is http://example.com/api/v1/accounts, then your baseUrl is `/api/v1`. The default baseUrl is an empty string which resolves to the same url that AngularJS is running, so you can also set an absolute url like `http://api.example.com/api/v1` if you need do set another domain.\n\n#### setExtraFields\nThis are the fields that you want to save from your parent resources if you need to display them. By default this is an Empty Array which will suit most cases\n\n#### setParentless\nUse this property to control whether Restangularized elements to have a parent or not. So, for example if you get an account and then get a nested list of buildings, you may want the buildings URL to be simple `/buildings/123` instead of `/accounts/123/buildings/123`. This property lets you do that.\n\nThis method accepts 2 parameters:\n\n* Boolean: Specifies if all elements should be parentless or not\n* Array: Specifies the routes (types) of all elements that should be parentless. For example `['buildings']`\n\n#### setDefaultHttpFields\n`$http` from AngularJS can receive a bunch of parameters like `cache`, `transformRequest` and so on. You can set all of those properties in the object sent on this setter so that they will be used in EVERY API call made by Restangular. This is very useful for caching for example. All properties that can be set can be checked here: http://docs.angularjs.org/api/ng.$http#Parameters\n\n#### addElementTransformer\nThis is a hook. After each element has been \"restangularized\" (Added the new methods from Restangular), the corresponding transformer will be called if it fits. \n\nThis should be used to add your own methods / functions to entities of certain types.\n\nYou can add as many element transformers as you want. The signature of this method can be one of the following:\n\n* **addElementTransformer(route, transformer)**: Transformer is called with all elements that have been restangularized, no matter if they're collections or not.\n\n* **addElementTransformer(route, isCollection, transformer)**: Transformer is called with all elements that have been restangularized and match the specification regarding if it's a collection or not (true | false)\n\n\n#### setOnElemRestangularized\nThis is a hook. After each element has been \"restangularized\" (Added the new methods from Restangular), this will be called. It means that if you receive a list of objects in one call, this method will be called first for the collection and then for each element of the collection.\n\n**I favor the usage of `addElementTransformer` instead of `onElemRestangularized` whenever possible as the implementation is much cleaner.**\n\n\nThis callback is a function that has 3 parameters:\n\n* **elem**: The element that has just been restangularized. Can be a collection or a single element.\n* **isCollection**: Boolean indicating if this is a collection or a single element.\n* **what**: The model that is being modified. This is the \"path\" of this resource. For example `buildings`\n* **Restangular**: The instanced service to use any of its methods\n \nThis can be used together with `addRestangularMethod` (Explained later) to add custom methods to an element\n\n\n#### setResponseInterceptor (or setResponseExtractor. It's an Alias)\nThe responseInterceptor is called after we get each response from the server. It's a function that receives this arguments:\n\n* **data**: The data received got from the server\n* **operation**: The operation made. It'll be the HTTP method used except for a `GET` which returns a list of element which will return `getList` so that you can distinguish them.\n* **what**: The model that's being requested. It can be for example: `accounts`, `buildings`, etc.\n* **url**: The relative URL being requested. For example: `/api/v1/accounts/123`\n* **response**: Full server response including headers\n* **deferred**: The deferred promise for the request.\n\nSome of the use cases of the responseInterceptor are handling wrapped responses and enhancing response elements with more methods among others.\n\nThe responseInterceptor must return the restangularized data element.\n\n#### setRequestInterceptor\nThe requestInterceptor is called before sending any data to the server. It's a function that must return the element to be requested. This function receives the following arguments:\n\n* **element**: The element to send to the server.\n* **operation**: The operation made. It'll be the HTTP method used except for a `GET` which returns a list of element which will return `getList` so that you can distinguish them.\n* **what**: The model that's being requested. It can be for example: `accounts`, `buildings`, etc.\n* **url**: The relative URL being requested. For example: `/api/v1/accounts/123`\n\n#### setFullRequestInterceptor\nThe fullRequestInterceptor is similar to the `requestInterceptor` but more powerful. It lets you change the element, the request parameters and the headers as well.\n\nIt's a function that receives the same as the `requestInterceptor` plus the headers and the query parameters (in that order).\n\nIt must return an object with the following properties:\n* **headers**: The headers to send\n* **params**: The request parameters to send\n* **element**: The element to send\n\n#### setErrorInterceptor\nThe errorInterceptor is called whenever there's an error. It's a function that receives the response as a parameter.\n\nThe errorInterceptor function, whenever it returns `false`, prevents the promise linked to a Restangular request to be executed.\nAll other return values (besides `false`) are ignored and the promise follows the usual path, eventually reaching the success or error hooks.\n\nThe feature to prevent the promise to complete is usefull whenever you need to intercept each Restangular error response for every request in your AngularJS application in a single place, increasing debugging capabilities and hooking security features in a single place.\n\n#### setRestangularFields\n\nRestangular required 3 fields for every \"Restangularized\" element. This are:\n\n* id: Id of the element. Default: id\n* route: Name of the route of this element. Default: route\n* parentResource: The reference to the parent resource. Default: parentResource\n* restangularCollection: A boolean indicating if this is a collection or an element. Default: restangularCollection\n* cannonicalId: If available, the path to the cannonical ID to use. Usefull for PK changes\n* etag: Where to save the ETag received from the server. Defaults to `restangularEtag`\n* selfLink: The path to the property that has the URL to this item. If your REST API doesn't return a URL to an item, you can just leave it blank. Defaults to `href`\n\nAll of these fields except for `id` and `selfLink` are handled by Restangular, so most of the time you won't change them. You can configure the name of the property that will be binded to all of this fields by setting restangularFields property.\n\n#### setMethodOverriders\n\nYou can now Override HTTP Methods. You can set here the array of methods to override. All those methods will be sent as POST and Restangular will add an X-HTTP-Method-Override header with the real HTTP method we wanted to do.\n\n#### setDefaultRequestParams\n\nYou can set default Query parameters to be sent with every request and every method.\n\nAdditionally, if you want to configure request params per method, you can use `requestParams` configuration similar to `$http`. For example `RestangularProvider.requestParams.get = {single: true}`.\n\nSupported method to configure are: remove, get, post, put, common (all)\n\n#### setFullResponse\n\nYou can set fullResponse to true to get the whole response every time you do any request. The full response has the restangularized data in the `data` field, and also has the headers and config sent. By default, it's set to false.\n\n#### setDefaultHeaders\n\nYou can set default Headers to be sent with every request.\n\n#### setRequestSuffix\n\nIf all of your requests require to send some suffix to work, you can set it here. For example, if you need to send the format like `/users/123.json` you can add that `.json` to the suffix using the `setRequestSuffix` method\n\n#### setUseCannonicalId\n\nYou can set this to either `true` or `false`. By default it's false. If set to true, then the cannonical ID from the element will be used for URL creation (in DELETE, PUT, POST, etc.). What this means is that if you change the ID of the element and then you do a put, if you set this to true, it'll use the \"old\" ID which was received from the server. If set to false, it'll use the new ID assigned to the element.\n\n### How to configure them globally\n\nYou can configure this in either the `config` or the `run` method. If your configurations don't need any other services, then I'd recommend you do them in the `config`. If your configurations depend on other services, you can configure them in the `run` using `Restangular` instead of `RestangularProvider` \n\n#### Configuring in the `config`\n````javascript\napp.config(function(RestangularProvider) {\n    RestangularProvider.setBaseUrl('/api/v1');\n    RestangularProvider.setExtraFields(['name']);\n    RestangularProvider.setResponseExtractor(function(response, operation) {\n        return response.data;\n    });\n    \n    RestangularProvider.addElementTransformer('accounts', false, function(element) {\n       element.accountName = 'Changed';\n       return element;\n    });\n    \n    RestangularProvider.setDefaultHttpFields({cache: true});\n    RestangularProvider.setMethodOverriders([\"put\", \"patch\"]);\n    \n    // In this case we are mapping the id of each element to the _id field.\n    // We also change the Restangular route. \n    // The default value for parentResource remains the same.\n    RestangularProvider.setRestangularFields({\n      id: \"_id\",\n      route: \"restangularRoute\",\n      selfLink: \"self.href\"\n    });\n    \n    RestangularProvider.setRequestSuffix('.json');\n    \n    // Use Request interceptor\n    RestangularProvider.setRequestInterceptor(function(element, operation, route, url) {\n      delete element.name;\n      return element;\n    });\n    \n    // ..or use the full request interceptor, setRequestInterceptor's more powerful brother!\n    RestangularProvider.setFullRequestInterceptor(function(element, operation, route, url, headers, params) {\n      delete element.name;      \n      return {\n        element: element,\n        params: _.extend(params, {single: true}),\n        headers: headers\n      };\n    });\n    \n});\n\n````\n\n#### Configuring in the `run`\n\n````javascript\n// Here I inject the service BaseUrlCalculator which I need\napp.run(function(Restangular, BaseUrlCalculator) {\n    Restangular.setBaseUrl(BaseUrlCalculator.calculate());\n});\n````\n\n### How to create a Restangular service with a different configuration from the global one\nLet's assume that for most requests you need some configuration (The global one), and for just a bunch of methods you need another configuration. In that case, you'll need to create another Restangular service with this particular configuration. This scoped configuration will inherit all defaults from the global one. Let's see how.\n\n````javascript\n// Global configuration\napp.config(function(RestangularProvider) {\n  RestangularProvider.setBaseUrl('http://www.google.com');\n  RestangularProvider.setRequestSuffix('.json');\n});\n\n// Restangular service that uses Bing\napp.factory('BingRestangular', function(Restangular) {\n  return Restangular.withConfig(function(RestangularConfigurer) {\n    RestangularConfigurer.setBaseUrl('http://www.bing.com');\n  });\n});\n\n// Let's use them from a controller\napp.controller('MainCtrl', function(Restangular, BingRestangular) {\n  \n  // GET to http://www.google.com/users.json\n  // Uses global configuration\n  Restangular.all('users').getList()\n  \n  // GET to http://www.bing.com/users.json\n  // Uses Bing configuration which is based on Global one, therefore .json is added.\n  BingRestangular.all('users').getList()\n});\n````\n\n## Methods description\n\nThere are 3 sets of methods. Collections have some methods and elements have others. There are are also some common methods for all of them\n\n### Restangular methods\nThis are the methods that can be called in the Restangular object.\n* **one(route, id)**: This will create a new Restangular object that is just a pointer to one element with the route `route` and the specified id.\n* **all(route)**: This will create a new Restangular object that is just a pointer to a list of elements for the specified path.\n* **oneUrl(route, url)**: This will create a new Restangular object that is just a pointer to one element with the specified URL.\n* **allUrl(route, url)**: This creates a Restangular object that is just a pointer to a list at the specified URL.\n* **copy(fromElement)**: This will create a copy of the from element so that we can modified the copied one.\n* **restangularizeElement(parent, element, route)**: Restangularizes a new element\n* **restangularizeCollection(parent, element, route)**: Restangularizes a new collection\n\n### Element methods\n* **get([queryParams, headers])**: Gets the element. Query params and headers are optionals\n* **getList(subElement, [queryParams, headers])**: Gets a nested resource. subElement is mandatory. **It's a string with the name of the nested resource (and URL)**. For example `buildings`\n* **put([queryParams, headers])**: Does a put to the current element\n* **post(subElement, elementToPost, [queryParams, headers])**: Does a POST and creates a subElement. Subelement is mandatory and is the nested resource. Element to post is the object to post to the server\n* **remove([queryParams, headers])**: Does a DELETE\n* **head([queryParams, headers])**: Does a HEAD\n* **trace([queryParams, headers])**: Does a TRACE\n* **options([queryParams, headers])**: Does a OPTIONS\n* **patch([queryParams, headers])**: Does a PATCH\n* **one(route, id)**: Used for RequestLess connections and URL Building. See section below.\n* **all(route)**: Used for RequestLess connections and URL Building. See section below.\n* **oneUrl(route, url)**: This will create a new Restangular object that is just a pointer to one element with the specified URL.\n* **allUrl(route, url)**: This creates a Restangular object that is just a pointer to a list at the specified URL.\n* **getRestangularUrl()**: Gets the URL of the current object.\n\n### Collection methods\n* **getList([queryParams, headers]): Gets itself again (Remember this is a collection)**.\n* **post(elementToPost, [queryParams, headers])**: Creates a new element of this collection.\n* **head([queryParams, headers])**: Does a HEAD\n* **trace: ([queryParams, headers])**: Does a TRACE\n* **options: ([queryParams, headers])**: Does a OPTIONS\n* **patch([queryParams, headers])**: Does a PATCH\n* **putElement(idx, params, headers)**: Puts the element on the required index and returns a promise of the updated new array\n* **getRestangularUrl()**: Gets the URL of the current object.\n* **one(route, id)**: Used for RequestLess connections and URL Building. See section below.\n* **all(route)**: Used for RequestLess connections and URL Building. See section below.\n* **oneUrl(route, url)**: This will create a new Restangular object that is just a pointer to one element with the specified URL.\n* **allUrl(route, url)**: This creates a Restangular object that is just a pointer to a list at the specified URL.\n\n\n### Custom methods\n* **customGET(path, [params, headers])**: Does a GET to the specific path. Optionally you can set params and headers.\n* **customGETLIST(path, [params, headers])**: Does a GET to the specific path. **In this case, you expect to get an array, not a single element**. Optionally you can set params and headers.\n* **customDELETE(path, [params, headers])**: Does a DELETE to the specific path. Optionally you can set params and headers.\n* **customPOST([elem, path, params, headers])**: Does a POST to the specific path. Optionally you can set params and headers and elem. Elem is the element to post. If it's not set, it's assumed that it's the element itself from which you're calling this function.\n* **customPUT([elem, path, params, headers])**: Does a PUT to the specific path. Optionally you can set params and headers and elem. Elem is the element to post. If it's not set, it's assumed that it's the element itself from which you're calling this function.\n* **customOperation(operation, path, [params, headers, elem])**: This does a custom operation to the path that we specify. This method is actually used from all the others in this subsection. Operation can be one of: get, post, put, delete, head, options, patch, trace\n* **addRestangularMethod(name, operation, [path, params, headers, elem])**: This will add a new restangular method to this object with the name `name` to the operation and path specified (or current path otherwise). There's a section on how to do this later. \n\n \nLet's see an example of this:\n\n````javascript\n// GET /accounts/123/messages\nRestangular.one(\"accounts\", 123).customGET(\"messages\")\n\n// GET /accounts/messages?param=param2\nRestangular.all(\"accounts\").customGET(\"messages\", {param: \"param2\"})\n````\n## Copying elements\nBefore modifying an object, we sometimes want to copy it and then modify the copied object. We can't use `angular.copy` for this because it'll not change the `this` binded in the functions we add to the object. In this cases, you must use `Restangular.copy(fromElement)`.\n\n## Enhanced promises\n\nRestangular uses enhanced promises when returning. What does this mean? All promises returned now have 2 additional methods and collection promises have 3. This are the methods:\n\n* **call(methodName, params*)**: This will return a new promise of the previous value, after calling the method called methodName with the parameters params.\n* **get(fieldName)**: This will return a new promise for the type of the field. The param of this new promise is the property `fieldName` from the original promise result.\n* **push(object)**: This method will only be in the promises of arrays. It's a subset of the call method that does a push.\n \nI know these explanations are quite complicated, so let's see an example :D.\n\n````javascript\nvar buildings = Restangular.all(\"buildings\").getList();\n\n// New promise after adding the new building\n// Now you can show in scope this newBuildings promise and it'll show all the buildings \n// received from server plus the new one added\nvar newBuildings = buildings.push({name: \"gonto\"});\n\nvar newBuildingsSame = buildings.call(\"push\", {name: \"gonto\"});\n\n// This is a promise of a number value. You can show it in the UI\nvar lengthPromise = buildings.get(\"length\");\n\nlengthPromise.then(function(length) {\n  // Here the length is the real length value of the returned collection of buildings\n});\n````\n\n## Using Self reference resources\n\nA lot of REST APIs return the URL to self of the element that you're querying. You can use that with Restangular so that you don't have to create the URLs yourself, but use the ones provided by the server.\n\nLet's say that when doing a GET to `/people` you get the following\n\n````javascript\n[{\n  name: \"Martin\",\n  lastName: \"Gontovnikas\"\n  self: {\n    link: 'http://www.example.com/people/gonto'\n  }\n}, {\n  name: \"John\",\n  lastName: \"Wayne\"\n  self: {\n    link: 'http://www.example.com/people/jhonny'\n  }\n}]\n````\n\nIn this case, as you can see, the URL to each element can't be guessed so we need to use that to reference the element. Restangular supports both relative and absolute URLs :).\n\nHow do we do this with Restangular?\n\nFirst, we need to configure the path for the link to self. For that, int he config we do:\n\n````javascript\nRestangularProvider.setRestangularFields({\n  selfLink: 'self.link'\n});\n````\n\nThen, we can just use this :)\n\n````javascript\n// Instead of using all we could also use allUrl to set a URL\n// Restangular.allUrl('people', 'http://www.example.com/people')\n\nRestangular.all('people').getList().then(function(people) {\n\n  var gonto = people[0];\n  \n  gonto.name = \"Owned\";\n  \n  // This will do a PUT to http://www.example.com/people/gonto\n  // It uses the self linking property :D\n  gonto.put()\n})\n````\n\n## URL Building\nSometimes, we have a lot of nested entities (and their IDs), but we just want the last child. In those cases, doing a request for everything to get the last child is overkill. For those cases, I've added the possibility to create URLs using the same API as creating a new Restangular object. This connections are created without making any requests. Let's see how to do this:\n\n````javascript\n\nvar restangularSpaces = Restangular.one(\"accounts\",123).one(\"buildings\", 456).all(\"spaces\");\n\n// This will do ONE get to /accounts/123/buildings/456/spaces\nrestangularSpaces.getList()\n\n// This will do ONE get to /accounts/123/buildings/456/spaces/789\nRestangular.one(\"accounts\", 123).one(\"buildings\", 456).one(\"spaces\", 789).get()\n\n// POST /accounts/123/buildings/456/spaces\nRestangular.one(\"accounts\", 123).one(\"buildings\", 456).all(\"spaces\").post({name: \"New Space\"});\n\n// DELETE /accounts/123/buildings/456\nRestangular.one(\"accounts\", 123).one(\"buildings\", 456).remove();\n````\n\n## Creating new Restangular Methods\n\nLet's assume that your API needs some custom methods to work. If that's the case, always calling customGET or customPOST for that method with all parameters is a pain in the ass. That's why every element has a `addRestangularMethod` method. \n\nThis can be used together with the hook `addElementTransformer` to do some neat stuff. Let's see an example to learn this:\n\n````javascript\n// In your app configuration (config method)\n\n// It will transform all building elements, NOT collections\nRestangularProvider.addElementTransformer('buildings', false, function(building) {\n        // This will add a method called evaluate that will do a get to path evaluate with NO default\n        // query params and with some default header\n        // signature is (name, operation, path, params, headers, elementToPost)\n        \n        building.addRestangularMethod('evaluate', 'get', 'evaluate', undefined, {'myHeader': 'value'});\n        \n        return building;\n});\n\nRestangularProvider.addElementTransformer('users', true, function(user) {\n        // This will add a method called login that will do a POST to the path login\n        // signature is (name, operation, path, params, headers, elementToPost)\n        \n        user.addRestangularMethod('login', 'post', 'login');\n        \n        return user;\n});\n\n// Then, later in your code you can do the following:\n\n// GET to /buildings/123/evaluate?myParam=param with headers myHeader: value\n\n// Signature for this \"custom created\" methods is (params, headers, elem) if it's a safe operation (GET, OPTIONS, etc.)\n// If it's an unsafe operation (POST, PUT, etc.), signature is (elem, params, headers).\n\n// If something is set to any of this variables, the default set in the method creation will be overridden\n// If nothing is set, then the defaults are sent\nRestangular.one('building', 123).evaluate({myParam: 'param'});\n\n// GET to /buildings/123/evaluate?myParam=param with headers myHeader: specialHeaderCase\n\nRestangular.one('building', 123).evaluate({myParam: 'param'}, {'myHeader': 'specialHeaderCase'});\n\n// Here the body of the POST is going to be {key: value} as POST is an unsafe operation\nRestangular.all('users').login({key: value});\n\n````\n\n## Adding Custom Methods to Collections\n\nCreate custom methods for your collection using Restangular.extendCollection(). This is an alias for:\n\n```\n  Restangular.addElementTransformer(route, true, fn)\n```\n\n### Example:\n```\n  // create methods for your collection\n  Restangular.extendCollection('accounts', function(collection) {\n    collection.totalAmount = function() {\n      // implementation here\n    };\n\n    return collection;\n  });\n\n  var accountsPromise = Restangular.all('accounts').getList();\n      \n  accountsPromise.then(function(accounts) {\n    accounts.totalAmount(); // invoke your custom collection method\n  });\n```\n\n## Adding Custom Methods to Models\n\nCreate custom methods for your models using Restangular.extendModel(). This is an alias for:\n\n```\n  Restangular.addElementTransformer(route, false, fn)\n```\n\n### Example:\n```\n  Restangular.extendModel('accounts', function(model) {\n    model.prettifyAmount = function() {};\n    return model;\n  });\n\n  var accountPromise = Restangular.one('accounts', 1).get();\n  \n  accountPromise.then(function(account) {\n    account.prettifyAmount(); // invoke your custom model method\n  });\n```\n\n# FAQ\n\n#### **How can I handle errors?**\n\nErrors can be checked on the second argument of the then.\n\n````javascript\nRestangular.all(\"accounts\").getList().then(function() {\n  console.log(\"All ok\");\n}, function(response) {\n  console.log(\"Error with status code\", response.status);\n});\n````\n\n#### **I need to send one header in EVERY Restangular request, how do I do this?**\n\nYou can use `defaultHeaders` property for this or `$httpProvider.defaults.headers`, whichever suits you better. `defaultsHeaders` can be scoped with `withConfig` so it's really cool.\n\n#### Can I cache requests?\n\n`$http` can cache requests if you send the property `cache` to true. You can do that for every Restangular request by using `defaultHttpFields` property. This is the way:\n\n````javascript\nRestangularProvider.setDefaultHttpFields({cache: true});\n````\n\n#### Can it be used in `$routeProvider.resolve`?\n\nYes, of course. Every method in Restangular returns a promise so this can be used without any problem.\n\n#### **My response is actually wrapped with some metadata. How do I get the data in that case?**\n\nSo, let's assume that your data is the following:\n\n````javascript\n // When getting the list, this is the response.\n{\n  \"status\":\"success\",\n  \"data\": {\n    \"data\": [{\n      \"id\":1,\n      // More data\n    }],\n    \"meta\": {\n      \"totalRecord\":100\n    }\n  }\n}\n\n// When getting a single element, this is the response.\n{\n  \"status\":\"success\",\n  \"data\": {\n    \"id\" : 1\n    // More data\n  }\n}\n````\n\nIn this case, you'd need to configure Restangular's `responseExtractor` and `listTypeIsArray`. See the following:\n\n````javascript\napp.config(function(RestangularProvider) {\n    \n    // Now let's configure the response extractor for each request\n    RestangularProvider.setResponseExtractor(function(response, operation, what, url) {\n      // This is a get for a list\n      var newResponse;\n      if (operation === \"getList\") {\n        // Here we're returning an Array which has one special property metadata with our extra information\n        newResponse = response.data.data;\n        newResponse.metadata = response.data.meta;\n      } else {\n        // This is an element\n        newResponse = response.data;\n      }\n      return newResponse;\n    });\n});\n````\n\n#### **I use Mongo and the ID of the elements is `_id` not `id` as the default. Therefore requests are sent to undefined routes**\n\nWhat you need to do is to configure the `RestangularFields` and set the `id` field to `_id`. Let's see how:\n\n````javascript\nRestangularProvider.setRestangularFields({\n  id: \"_id\"\n});\n````\n\n\n#### **How do I handle CRUD operations in a List returned by Restangular?**\n\nThe best option for doing CRUD operations with a list, is to actually use the \"real\" list, and not the promise. It makes it easy to interact with it.\n\nLet's see an example :).\n\n````javascript\n// Here we use then to resolve the promise.\nRestangular.all('users').getList().then(function(users) {\n  $scope.users = users;\n  var userWithId = _.find(users, function(user) {\n    return user.id === 123;\n  });\n\n  userWithId.name = \"Gonto\";\n  userWithId.put();\n  \n  // Alternatively delete the element from the list when finished\n  userWithId.remove().then(function() {\n    // Updating the list and removing the user after the response is OK.\n    $scope.users = _.without($scope.users, userWithId);\n  });\n\n});\n````\n\nWhen you actually get a list by doing\n\n````javascript\n$scope.owners = house.getList('owners')\n````\n\nYou're actually assigning a Promise to the owners value of the $scope. As Angular knows how to process promises, if in your view you do an ng-repeat of this $scope variable, results will be shown once the promise is resolved (Response arrived).\nHowever, changes to that promise that you do from your HTML won't be seen in the scope, as it's not a real array. It's just a promise of an array.\n\n#### When I set baseUrl with a port, it's stripped out.\n\nIt won't be stripped out anymore as I've ditched `$resource` :). Now you can happily put the port :).\n\n#### How can I access the `unrestangularized` element as well as the `restangularized` one?\n\nIn order to get this done, you need to use the `responseExtractor`. You need to set a property there that will point to the original response received. Also, you need to actually copy this response as that response is the one that's going to be `restangularized` later\n\n````javascript\nRestangularProvider.setResponseExtractor(function(response) {\n  var newResponse = response;\n  if (angular.isArray(response)) {\n    angular.forEach(newResponse, function(value, key) {\n      newResponse[key].originalElement = angular.copy(value);\n    });\n  } else {\n    newResponse.originalElement = angular.copy(response);\n  }\n\n  return newResponse;\n});\n````\n\n#### Why does this depend on Lodash / Underscore?\n\nThis is a very good question. I could've done the code so that I don't depend on Underscore nor Lodash, but I think both libraries make your life SO much easier. They have all of the \"functional\" stuff like map, reduce, filter, find, etc. \nWith these libraries, you always work with immutable stuff, you get compatibility for browsers which don't implement ECMA5 nor some of these cool methods, and they're actually quicker.\nSo, why not use it? If you've never heard of them, by using Restangular, you could start using them. Trust me, you're never going to give them up after this!\n\n\n# Supported Angular versions\n\nRestangular supports both 1.0.X and 1.1.X up to versions 1.0.7 and 1.1.5.\n\nAlso, when using Restangular with version >= 1.1.4, in case you're using Restangular inside a callback not handled by Angular, you have to wrap the whole request with `$scope.apply` to make it work or you need to run one extra `$digest` manually. Check out https://github.com/mgonto/restangular/issues/71\n\n\n# Server Frameworks\n\nThis server frameworks play real nice with Restangular, as they let you create a Nested Restful Resources API easily:\n\n* Ruby on Rails\n* CakePHP for PHP\n* Play1 & 2 for Java & scala\n* Restify and Express for NodeJS\n* Tastypie for Django \n\n\n# Releases Notes\n\n[Click here to see Releases Notes](https://github.com/mgonto/restangular/blob/master/CHANGELOG.md)\n\n# License\n\nThe MIT License\n\nCopyright (c) 2013 Martin Gontovnikas http://www.gon.to/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mgonto/restangular/issues"
  },
  "_id": "restangular@1.1.3",
  "dist": {
    "shasum": "41d3cd63be9e369f4451ade57b163a305d14723e"
  },
  "_from": "restangular@",
  "_resolved": "https://registry.npmjs.org/restangular/-/restangular-1.1.3.tgz"
}
